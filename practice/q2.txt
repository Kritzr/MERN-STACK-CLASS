To create an authentication system with a user feedback form, we will follow these steps:

1. **Navbar & Footer** – For navigation and displaying important links.
2. **Login Form** – For users to log in.
3. **Register Form** – For users to register.
4. **Forgot Password Form** – For users to recover their password.
5. **User Feedback Form** – A form where users can provide feedback after logging in.

We will use **React** along with **localStorage** for persistence, and simple **form validation** with regex for the password.

Let's break it down step by step and build the necessary components.

---

### Step 1: Setting Up the Project

Start by creating a new React app if you don't have one already.

1. **Create a React App**:
   ```bash
   npx create-react-app user-authentication-feedback
   cd user-authentication-feedback
   ```

2. **Install Bootstrap** (for styling):
   ```bash
   npm install bootstrap
   ```

3. **Import Bootstrap in `src/index.js`**:
   ```javascript
   import 'bootstrap/dist/css/bootstrap.min.css';
   ```

### Step 2: Create the Navbar & Footer

**`Navbar.js`**:

```jsx
import React from 'react';
import { Link } from 'react-router-dom';
import { Navbar, Nav } from 'react-bootstrap';

const NavbarComponent = ({ isLoggedIn, onLogout }) => {
  return (
    <Navbar bg="dark" variant="dark" expand="lg">
      <Navbar.Brand href="/">User Auth & Feedback</Navbar.Brand>
      <Nav className="ms-auto">
        {isLoggedIn ? (
          <>
            <Nav.Link as={Link} to="/profile">Profile</Nav.Link>
            <Nav.Link as={Link} to="/" onClick={onLogout}>Logout</Nav.Link>
          </>
        ) : (
          <>
            <Nav.Link as={Link} to="/login">Login</Nav.Link>
            <Nav.Link as={Link} to="/register">Register</Nav.Link>
          </>
        )}
      </Nav>
    </Navbar>
  );
};

export default NavbarComponent;
```

**`Footer.js`**:

```jsx
import React from 'react';

const FooterComponent = () => {
  return (
    <footer className="bg-dark text-white text-center py-3">
      <p>Quick Links | Contact Info</p>
    </footer>
  );
};

export default FooterComponent;
```

### Step 3: Create the Forms

#### 1. **Login Form**

**`LoginForm.js`**:

```jsx
import React, { useState } from 'react';
import { Form, Button, Container, Alert } from 'react-bootstrap';
import { useHistory } from 'react-router-dom';

const LoginForm = ({ onLogin }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const history = useHistory();

  const handleSubmit = (e) => {
    e.preventDefault();

    // Simple validation
    if (!email || !password) {
      setError('Please fill out both fields.');
      return;
    }

    // Check if user exists in localStorage
    const users = JSON.parse(localStorage.getItem('users')) || [];
    const user = users.find(user => user.email === email && user.password === password);

    if (user) {
      localStorage.setItem('currentUser', JSON.stringify(user));
      onLogin();
      history.push('/');
    } else {
      setError('Invalid credentials.');
    }
  };

  return (
    <Container className="my-5">
      <h2>Login</h2>
      {error && <Alert variant="danger">{error}</Alert>}
      <Form onSubmit={handleSubmit}>
        <Form.Group className="mb-3" controlId="formEmail">
          <Form.Label>Email</Form.Label>
          <Form.Control type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
        </Form.Group>

        <Form.Group className="mb-3" controlId="formPassword">
          <Form.Label>Password</Form.Label>
          <Form.Control type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
        </Form.Group>

        <Button variant="primary" type="submit">Login</Button>
      </Form>
    </Container>
  );
};

export default LoginForm;
```

#### 2. **Register Form**

**`RegisterForm.js`**:

```jsx
import React, { useState } from 'react';
import { Form, Button, Container, Alert } from 'react-bootstrap';
import { useHistory } from 'react-router-dom';

const RegisterForm = () => {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const history = useHistory();

  const handleSubmit = (e) => {
    e.preventDefault();

    // Simple validation
    if (!firstName || !lastName || !email || !phone || !password || !confirmPassword) {
      setError('Please fill out all fields.');
      return;
    }

    // Password validation with regex
    const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d@$!%*?&]{8,}$/;
    if (!password.match(passwordRegex)) {
      setError('Password must be at least 8 characters long and contain letters and numbers.');
      return;
    }

    if (password !== confirmPassword) {
      setError('Passwords do not match.');
      return;
    }

    const newUser = { firstName, lastName, email, phone, password };

    // Save user data to localStorage
    const users = JSON.parse(localStorage.getItem('users')) || [];
    users.push(newUser);
    localStorage.setItem('users', JSON.stringify(users));

    setError('');
    history.push('/login');
  };

  return (
    <Container className="my-5">
      <h2>Register</h2>
      {error && <Alert variant="danger">{error}</Alert>}
      <Form onSubmit={handleSubmit}>
        <Form.Group className="mb-3" controlId="formFirstName">
          <Form.Label>First Name</Form.Label>
          <Form.Control type="text" value={firstName} onChange={(e) => setFirstName(e.target.value)} />
        </Form.Group>

        <Form.Group className="mb-3" controlId="formLastName">
          <Form.Label>Last Name</Form.Label>
          <Form.Control type="text" value={lastName} onChange={(e) => setLastName(e.target.value)} />
        </Form.Group>

        <Form.Group className="mb-3" controlId="formEmail">
          <Form.Label>Email</Form.Label>
          <Form.Control type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
        </Form.Group>

        <Form.Group className="mb-3" controlId="formPhone">
          <Form.Label>Phone</Form.Label>
          <Form.Control type="text" value={phone} onChange={(e) => setPhone(e.target.value)} />
        </Form.Group>

        <Form.Group className="mb-3" controlId="formPassword">
          <Form.Label>Password</Form.Label>
          <Form.Control type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
        </Form.Group>

        <Form.Group className="mb-3" controlId="formConfirmPassword">
          <Form.Label>Confirm Password</Form.Label>
          <Form.Control type="password" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} />
        </Form.Group>

        <Button variant="primary" type="submit">Register</Button>
      </Form>
    </Container>
  );
};

export default RegisterForm;
```

#### 3. **Forgot Password Form**

**`ForgotPasswordForm.js`**:

```jsx
import React, { useState } from 'react';
import { Form, Button, Container, Alert } from 'react-bootstrap';

const ForgotPasswordForm = () => {
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();

    // Check if the email exists in localStorage
    const users = JSON.parse(localStorage.getItem('users')) || [];
    const user = users.find(user => user.email === email);

    if (user) {
      setMessage('A password recovery email has been sent.');
    } else {
      setMessage('No account found with this email.');
    }
  };

  return (
    <Container className="my-5">
      <h2>Forgot Password</h2>
      {message && <Alert variant="info">{message}</Alert>}
      <Form onSubmit={handleSubmit}>
        <Form.Group className="mb-3" controlId="formEmail">
          <Form.Label>Email</Form.Label>
          <Form.Control type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
        </Form.Group>

        <Button variant="primary" type="submit">Send Recovery Email</Button>
      </Form>
    </Container>
  );
};

export default ForgotPasswordForm;
```

### Step 4: User Feedback Form

**`FeedbackForm.js`**:

```jsx
import React, { useState } from 'react';
import { Form, Button, Container, Alert } from 'react-bootstrap';

const FeedbackForm = () => {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [mobile, setMobile] = useState('');
  const [rating, setRating] = useState(1);
  const [feedback, setFeedback] = useState('');
  const [message, setMessage] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();

    if (!firstName || !lastName || !email || !mobile || !feedback) {
      setMessage('Please fill out all fields.');
      return;
    }

    const feedbackData = { firstName, lastName, email, mobile, rating, feedback };

    // Save feedback to localStorage
    const storedFeedback = JSON.parse(localStorage.getItem('feedback')) || [];
    storedFeedback.push(feedbackData);
    localStorage.setItem('feedback', JSON.stringify(storedFeedback));

    setMessage('Thank you for your feedback!');
    setFirstName('');
    setLastName('');
    setEmail('');
    setMobile('');
    setRating(1);
    setFeedback('');
  };

  return (
    <Container className="my-5">
      <h2>User Feedback</h2>
      {message && <Alert variant="success">{message}</Alert>}
      <Form onSubmit={handleSubmit}>
        <Form.Group className="mb-3" controlId="formFirstName">
          <Form.Label>First Name</Form.Label>
          <Form.Control type="text" value={firstName} onChange={(e) => setFirstName(e.target.value)} />
        </Form.Group>

        <Form.Group className="mb-3" controlId="formLastName">
          <Form.Label>Last Name</Form.Label>
          <Form.Control type="text" value={lastName} onChange={(e) => setLastName(e.target.value)} />
        </Form.Group>

        <Form.Group className="mb-3" controlId="formEmail">
          <Form.Label>Email</Form.Label>
          <Form.Control type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
        </Form.Group>

        <Form.Group className="mb-3" controlId="formMobile">
          <Form.Label>Mobile No</Form.Label>
          <Form.Control type="text" value={mobile} onChange={(e) => setMobile(e.target.value)} />
        </Form.Group>

        <Form.Group className="mb-3" controlId="formRating">
          <Form.Label>Rating</Form.Label>
          <Form.Control as="select" value={rating} onChange={(e) => setRating(e.target.value)}>
            {[1, 2, 3, 4, 5].map((star) => (
              <option key={star} value={star}>
                {star}
              </option>
            ))}
          </Form.Control>
        </Form.Group>

        <Form.Group className="mb-3" controlId="formFeedback">
          <Form.Label>Feedback</Form.Label>
          <Form.Control
            as="textarea"
            rows={4}
            value={feedback}
            onChange={(e) => setFeedback(e.target.value)}
          />
        </Form.Group>

        <Button variant="primary" type="submit">Submit Feedback</Button>
      </Form>
    </Container>
  );
};

export default FeedbackForm;
```

### Step 5: Routing and App Component

Now we will set up the routing and manage the user login state in the **`App.js`**.

**`App.js`**:

```jsx
import React

, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import NavbarComponent from './Navbar';
import FooterComponent from './Footer';
import LoginForm from './LoginForm';
import RegisterForm from './RegisterForm';
import ForgotPasswordForm from './ForgotPasswordForm';
import FeedbackForm from './FeedbackForm';

const App = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  useEffect(() => {
    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
    if (currentUser) {
      setIsLoggedIn(true);
    }
  }, []);

  const handleLogin = () => {
    setIsLoggedIn(true);
  };

  const handleLogout = () => {
    localStorage.removeItem('currentUser');
    setIsLoggedIn(false);
  };

  return (
    <Router>
      <NavbarComponent isLoggedIn={isLoggedIn} onLogout={handleLogout} />
      <Switch>
        <Route path="/login">
          <LoginForm onLogin={handleLogin} />
        </Route>
        <Route path="/register">
          <RegisterForm />
        </Route>
        <Route path="/forgot-password">
          <ForgotPasswordForm />
        </Route>
        <Route path="/feedback">
          <FeedbackForm />
        </Route>
        <Route path="/" exact>
          {isLoggedIn ? (
            <FeedbackForm />
          ) : (
            <h2>Please login to access the feedback form.</h2>
          )}
        </Route>
      </Switch>
      <FooterComponent />
    </Router>
  );
};

export default App;
```

### Explanation:

1. **Login & Register Forms**: Simple validation and saving/retrieving user information from `localStorage`.
2. **Feedback Form**: Users can submit their feedback. The form saves feedback to `localStorage`.
3. **Navbar**: Conditional rendering based on the user's login state.
4. **App**: Manages the login state and renders the appropriate components based on the route.

### Final Thoughts

This is a basic, functional user authentication and feedback system using React and localStorage. It includes validation, a navigation bar, a user feedback form, and simple login/register functionality. Feel free to expand it with more features like password hashing or advanced UI styles!