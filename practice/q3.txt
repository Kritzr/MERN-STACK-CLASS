### Grocery Inventory Management System using React

This project is focused on building a **Grocery Inventory Management System** where an admin can add, edit, and delete grocery items. The data is stored in **localStorage** and updates in **real-time**.

Below, I will walk you through how to implement this system with React.

### Step-by-Step Setup

#### Step 1: Install React and Set Up Your Project

1. **Create a new React app**:
   ```bash
   npx create-react-app grocery-inventory
   cd grocery-inventory
   ```

2. **Install Bootstrap** for styling:
   ```bash
   npm install bootstrap
   ```

3. **Import Bootstrap CSS** in `src/index.js`:
   ```javascript
   import 'bootstrap/dist/css/bootstrap.min.css';
   ```

#### Step 2: Create Components for the Application

Letâ€™s break the application into components:

1. **Navbar** - For navigation (Home, Inventory List, Add Product).
2. **InventoryForm** - Form to add or edit inventory items.
3. **InventoryList** - Table or card layout displaying products.
4. **App** - Main component that brings everything together.

### 1. **Navbar Component**

The **Navbar** component will contain the logo and links to navigate between the sections.

**`Navbar.js`**:

```jsx
import React from 'react';
import { Link } from 'react-router-dom';
import { Navbar, Nav } from 'react-bootstrap';

const NavbarComponent = () => {
  return (
    <Navbar bg="dark" variant="dark" expand="lg">
      <Navbar.Brand href="/">Grocery Inventory</Navbar.Brand>
      <Nav className="ms-auto">
        <Nav.Link as={Link} to="/">Home</Nav.Link>
        <Nav.Link as={Link} to="/inventory">Inventory List</Nav.Link>
        <Nav.Link as={Link} to="/add-product">Add Product</Nav.Link>
      </Nav>
    </Navbar>
  );
};

export default NavbarComponent;
```

### 2. **Inventory Form Component**

The **InventoryForm** component is where the admin can add new products or update existing ones. It includes form fields for the product ID, category, product name, quantity, MRP (Maximum Retail Price), and selling price. It also includes form validation.

**`InventoryForm.js`**:

```jsx
import React, { useState, useEffect } from 'react';
import { Form, Button, Container, Alert } from 'react-bootstrap';

const InventoryForm = ({ productToEdit, onSave }) => {
  const [formData, setFormData] = useState({
    productId: '',
    category: 'Fruits',
    productName: '',
    quantity: '',
    mrp: '',
    sellingPrice: '',
  });
  const [alert, setAlert] = useState(null);

  useEffect(() => {
    if (productToEdit) {
      setFormData({
        productId: productToEdit.productId,
        category: productToEdit.category,
        productName: productToEdit.productName,
        quantity: productToEdit.quantity,
        mrp: productToEdit.mrp,
        sellingPrice: productToEdit.sellingPrice,
      });
    }
  }, [productToEdit]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    // Form validation
    if (!formData.productName || !formData.quantity || !formData.mrp || !formData.sellingPrice) {
      setAlert('All fields are required!');
      return;
    }

    if (parseFloat(formData.sellingPrice) > parseFloat(formData.mrp)) {
      setAlert('Selling price cannot be greater than MRP!');
      return;
    }

    setAlert(null); // Clear alert

    // Save data in localStorage
    onSave(formData);
    setFormData({
      productId: '',
      category: 'Fruits',
      productName: '',
      quantity: '',
      mrp: '',
      sellingPrice: '',
    });
  };

  return (
    <Container className="my-5">
      <h2>{productToEdit ? 'Edit Product' : 'Add Product'}</h2>

      {alert && <Alert variant="danger">{alert}</Alert>}

      <Form onSubmit={handleSubmit}>
        <Form.Group controlId="formProductId" className="mb-3">
          <Form.Label>Product ID</Form.Label>
          <Form.Control
            type="text"
            name="productId"
            value={formData.productId}
            onChange={handleChange}
            required
          />
        </Form.Group>

        <Form.Group controlId="formCategory" className="mb-3">
          <Form.Label>Category</Form.Label>
          <Form.Select
            name="category"
            value={formData.category}
            onChange={handleChange}
          >
            <option value="Fruits">Fruits</option>
            <option value="Vegetables">Vegetables</option>
            <option value="Dairy">Dairy</option>
          </Form.Select>
        </Form.Group>

        <Form.Group controlId="formProductName" className="mb-3">
          <Form.Label>Product Name</Form.Label>
          <Form.Control
            type="text"
            name="productName"
            value={formData.productName}
            onChange={handleChange}
            required
          />
        </Form.Group>

        <Form.Group controlId="formQuantity" className="mb-3">
          <Form.Label>Quantity</Form.Label>
          <Form.Control
            type="number"
            name="quantity"
            value={formData.quantity}
            onChange={handleChange}
            required
          />
        </Form.Group>

        <Form.Group controlId="formMRP" className="mb-3">
          <Form.Label>MRP</Form.Label>
          <Form.Control
            type="number"
            name="mrp"
            value={formData.mrp}
            onChange={handleChange}
            required
          />
        </Form.Group>

        <Form.Group controlId="formSellingPrice" className="mb-3">
          <Form.Label>Selling Price</Form.Label>
          <Form.Control
            type="number"
            name="sellingPrice"
            value={formData.sellingPrice}
            onChange={handleChange}
            required
          />
        </Form.Group>

        <Button variant="primary" type="submit">
          {productToEdit ? 'Update Product' : 'Add Product'}
        </Button>
        <Button variant="secondary" className="ms-2" onClick={() => setFormData({ productId: '', category: 'Fruits', productName: '', quantity: '', mrp: '', sellingPrice: '' })}>
          Reset
        </Button>
      </Form>
    </Container>
  );
};

export default InventoryForm;
```

### 3. **Inventory List Component**

The **InventoryList** component displays all the inventory items in a table format. Admins can also edit and delete products here.

**`InventoryList.js`**:

```jsx
import React, { useState, useEffect } from 'react';
import { Table, Button, Container } from 'react-bootstrap';
import { Link } from 'react-router-dom';

const InventoryList = ({ onDelete, onEdit }) => {
  const [inventory, setInventory] = useState([]);

  useEffect(() => {
    const storedInventory = JSON.parse(localStorage.getItem('inventory')) || [];
    setInventory(storedInventory);
  }, []);

  const handleDelete = (productId) => {
    const updatedInventory = inventory.filter(item => item.productId !== productId);
    setInventory(updatedInventory);
    localStorage.setItem('inventory', JSON.stringify(updatedInventory));
    onDelete();
  };

  return (
    <Container className="my-5">
      <h2>Inventory List</h2>
      <Table striped bordered hover>
        <thead>
          <tr>
            <th>Product Name</th>
            <th>Category</th>
            <th>Quantity</th>
            <th>MRP</th>
            <th>Selling Price</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {inventory.map(item => (
            <tr key={item.productId}>
              <td>{item.productName}</td>
              <td>{item.category}</td>
              <td>{item.quantity}</td>
              <td>{item.mrp}</td>
              <td>{item.sellingPrice}</td>
              <td>
                <Button variant="warning" onClick={() => onEdit(item)}>Edit</Button>
                <Button variant="danger" className="ms-2" onClick={() => handleDelete(item.productId)}>Delete</Button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
    </Container>
  );
};

export default InventoryList;
```

### 4. **App Component**

In the **App.js**, we need to bring all the components together.

**`App.js`**:

```jsx
import React, { useState } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import NavbarComponent from './components/Navbar';
import InventoryForm from './components/InventoryForm';
import InventoryList from './components/InventoryList';

const App = () => {
  const [productToEdit, setProductToEdit] = useState(null);

  const handleSaveProduct = (productData) => {
    const existingProducts = JSON.parse(localStorage.getItem('inventory')) || [];
    if (productToEdit) {
      const updatedProducts = existingProducts.map((product) => 
        product.productId === productToEdit.productId ? productData : product
      );
      localStorage.setItem('inventory', JSON.stringify(updatedProducts));
    } else {
      existingProducts.push(productData);
      localStorage.setItem('inventory', JSON.stringify(existingProducts));
    }
  };

  const handleDelete = () => {
    setProductToEdit(null);
  };

  const handleEdit = (product) => {
    setProductToEdit(product);
  };

  return (
    <Router>
      <NavbarComponent />
      <Switch>
        <Route path="/add-product">
          <InventoryForm productToEdit={productToEdit} onSave={handleSaveProduct} />
        </Route>
        <Route path="/inventory">
          <InventoryList onDelete={handleDelete} onEdit={handleEdit} />
        </Route>
        <Route path="/" exact>
          <h1>Welcome to the Grocery Inventory Management System</h1>
        </Route>
      </Switch>
    </Router>
  );
};

export default App;
```

### 5. **Run the Application**

1. **Start the app**:
   ```bash
   npm start
   ```

2. **Interact with the app**:
   - Navigate between Home, Inventory List, and Add Product.
   - Add products, edit them, and delete them.
   - All data will be stored in **localStorage** and persist even after page reloads.

---

### Summary of Features:
- **Add Product**: Add a product with a unique ID, category, name, quantity, MRP, and selling price.
- **Edit Product**: Modify an existing product's details.
- **Delete Product**: Remove a product from the inventory.
- **Real-time updates**: Changes are reflected immediately in the table and saved to **localStorage**.

Would you like me to help you further with styling or add additional features?